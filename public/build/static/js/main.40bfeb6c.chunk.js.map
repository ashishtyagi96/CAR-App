{"version":3,"sources":["assets/images/sidebar/pay.png","constant.js","helpers/cookie.js","helpers/xhrHelpers.js","modules/years/index.js","modules/companies/index.js","modules/models/index.js","modules/cars/index.js","modules/index.js","store.js","components/common/IndefiniteLoader.js","components/sidebar/index.js","containers/sidebar/index.js","components/car-filters/index.js","helpers/numberFormatter.js","components/pages/home/index.js","containers/pages/home/index.js","helpers/url/cars.js","components/pages/cars/index.js","containers/pages/cars/index.js","routes/global.js","App.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","PATH","window","location","href","split","slice","join","REQUEST_TYPE","getCookie","name","cookie_val","document","cookie","parts","length","decodeURIComponent","pop","shift","xFetch","options","headers","Accept","queryParams","postData","queryMethod","query","method","toUpperCase","post_body","body","multipart","JSON","stringify","Object","assign","parsedUrl","urlParser","url","set","additional","credentials","extras","fetch","toString","then","response","a","json","res","console","log","Error","catch","err","setCarsYearOfMake","state","data","years","setCarsCompanies","companies","setCarsModels","cars","setCarDetails","car_details","rootReducer","combineReducers","action","type","payload","middleWares","thunk","composedEnhancers","compose","applyMiddleware","IndefiniteLoader","className","iconClassName","indicator","spin","Sidebar","handleItemSelect","selectedKeys","history","props","push","this","auth","theme","onSelect","defaultSelectedKeys","style","width","height","overflow","Item","key","title","alt","src","productIcon","Component","withRouter","connect","CheckableTag","Tag","Search","Input","Meta","Card","CarFilters","loading","selectedTags","selectedCompanyTags","selectedModelTags","showCompany","showModel","searchOn","search_input","onSearch","value","fetchAllCarsYearOfMake","fetchAllCarsCompanies","year_of_make","company","fetchAllCarsModels","model","onChange","event","search","target","setState","showCar","car_id","pathname","tag","checked","selected","year_data","company_data","model_data","keys","map","span","placeholder","allowClear","margin","size","header","textAlign","fontWeight","bordered","dataSource","renderItem","item","indexOf","handleChange","cursor","handleChangeCompany","hidden","onClick","id","cover","actions","fontSize","color","amount","Intl","NumberFormat","currency","maximumFractionDigits","format","is_available","percent","status","description","orientation","React","Home","getData","renderLoading","dispatch","year","Cars","fetchCarDetails","match","params","getCarDetailsUrl","Global","fallback","exact","path","component","HOME","CARS","createBrowserHistory","App","isAuthenticated","Boolean","hostname","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.40bfeb6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pay.63e32956.png\";","const path = window.location.href;\n\nexport const HOST = path\n    .split(\"/\")\n    .slice(0, 3)\n    .join(\"/\");\n\nexport const PATH = {\n    ROOT: \"/\",\n    HOME: \"/home\",\n    CARS: \"/cars\"\n};\n\nexport const REQUEST_TYPE = {\n    POST: \"post\",\n    GET: \"get\",\n    PUT: \"put\",\n    DELETE: \"delete\"\n};\n","export function getCookie(name) {\n    let cookie_val = null;\n    if (document && document.cookie) {\n        var value = \"; \" + document.cookie;\n        var parts = value.split(\"; \" + name + \"=\");\n        if (parts.length === 2) {\n            cookie_val = decodeURIComponent(\n                parts\n                    .pop()\n                    .split(\";\")\n                    .shift()\n            );\n        }\n    }\n    return cookie_val;\n}\n\n/*\n * name - string, cookie name\n * value - string, cookie value\n * expires - string, time in GMT,\n * path - string, path at which cookie needs to be stored, default value: '/'\n * domain - string, subdomain, default value: COOKIE_DOMAIN\n * secure - boolean, set https cookie or not, default: false\n */\n\nexport function setCookie(\n    name,\n    value,\n    expires,\n    path = \"/\",\n    domain = \"COOKIE_DOMAIN\",\n    secure = false\n) {\n    let cookie =\n        name +\n        \"=\" +\n        encodeURIComponent(value) +\n        \";path=\" +\n        path +\n        \";domain=\" +\n        domain +\n        \";expires=\" +\n        expires;\n    if (typeof secure !== \"undefined\" && secure) {\n        cookie = cookie + \";secure=true\";\n    }\n    document.cookie = cookie;\n}\n","import urlParser from \"url-parse\";\nimport { getCookie } from \"./cookie\";\n\nexport function xFetch(options = {}) {\n    let headers = {\n        \"X-XSRF-TOKEN\": getCookie(\"XSRF-TOKEN\"),\n        Accept: \"application/json\"\n    };\n\n    let queryParams = {};\n    let postData = null;\n    let queryMethod = null;\n    const { query = {} } = options;\n\n    if (!options.method || options.method.toUpperCase() === \"GET\") {\n        if (options.body) {\n            queryParams = Object.assign({}, options.body, queryParams);\n        }\n        queryMethod = { method: \"GET\" };\n    } else {\n        let post_body = options.body || {};\n\n        if (options.multipart) {\n            postData = { body: post_body };\n        } else {\n            headers[\"Content-type\"] = \"application/json\";\n\n            postData = { body: JSON.stringify(post_body) };\n        }\n\n        queryMethod = { method: options.method };\n    }\n\n    const parsedUrl = new urlParser(`${options.url}`, true);\n\n    queryParams = Object.assign({}, parsedUrl.query, query, queryParams);\n\n    //Forming the new URL\n    parsedUrl.set(\"query\", queryParams);\n\n    if (!!options.headers) {\n        headers = Object.assign({}, headers, options.headers);\n    }\n\n    let additional = Object.assign(\n        {},\n        { credentials: \"same-origin\" },\n        queryMethod,\n        { headers: headers },\n        options.extras,\n        postData\n    );\n    return fetch(parsedUrl.toString(), additional)\n        .then(async response => {\n            try {\n                const res = await response.json();\n                return res;\n            } catch (ex) {\n                console.log(\"ex\", ex);\n                throw new Error(\"something went wrong\");\n            }\n        })\n        .catch(err => console.log(err));\n}\n","import { REQUEST_TYPE } from \"../../constant\";\nimport { xFetch } from \"../../helpers/xhrHelpers\";\nimport { getAllCarsYearOfMakeUrl } from \"../../helpers/url/cars\";\n\nexport const DISPATCH_ACTION_TYPE = \"DISPATCH_ACTION_TYPE\";\nexport const FETCHING_ALL_CARS_YEAR_OF_MAKE = \"FETCHING_ALL_CARS_YEAR_OF_MAKE\";\nexport const FETCHING_ALL_CARS_YEAR_OF_MAKE_COMPLETED =\n    \"FETCHING_ALL_CARS_YEAR_OF_MAKE_COMPLETED\";\nexport const FETCHING_ALL_CARS_YEAR_OF_MAKE_COMPLETED_WITH_ERROR =\n    \"FETCHING_ALL_CARS_YEAR_OF_MAKE_COMPLETED_WITH_ERROR\";\n\nexport const fetchAllCarsYearOfMake = (year='') => {\n    let response = {};\n    const url = getAllCarsYearOfMakeUrl();\n    return async dispatch => {\n        try {\n            response = await xFetch({\n                url: url,\n                method: REQUEST_TYPE.GET,\n                body: { year: year }\n            });\n            const { status, payload: { data } = {} } = response || {};\n            if (status === true) {\n                dispatch({\n                    type: FETCHING_ALL_CARS_YEAR_OF_MAKE_COMPLETED,\n                    payload: data\n                });\n            } else if (status === false) {\n                dispatch({\n                    type: FETCHING_ALL_CARS_YEAR_OF_MAKE_COMPLETED_WITH_ERROR\n                });\n            }\n        } catch (error) {\n            throw error;\n        }\n        return response;\n    };\n};\n\nfunction setCarsYearOfMake(state, data) {\n    const { years } = data;\n    if (years) {\n        return { ...years };\n    }\n    return state;\n}\n\nexport default (state = {}, action = {}) => {\n    const { type, payload = {} } = action;\n    switch (type) {\n        default:\n            return setCarsYearOfMake(state, payload);\n    }\n};\n","import { REQUEST_TYPE } from \"../../constant\";\nimport { xFetch } from \"../../helpers/xhrHelpers\";\nimport { getAllCarsCompaniesrl } from \"../../helpers/url/cars\";\n\nexport const DISPATCH_ACTION_TYPE = \"DISPATCH_ACTION_TYPE\";\nexport const FETCHING_ALL_CARS_COMPANIES = \"FETCHING_ALL_CARS_COMPANIES\";\nexport const FETCHING_ALL_CARS_COMPANIES_COMPLETED =\n    \"FETCHING_ALL_CARS_COMPANIES_COMPLETED\";\nexport const FETCHING_ALL_CARS_COMPANIES_COMPLETED_WITH_ERROR =\n    \"FETCHING_ALL_CARS_COMPANIES_COMPLETED_WITH_ERROR\";\n\nexport const fetchAllCarsCompanies = (query) => {\n    let response = {};\n    const {\n        year_of_make=0,\n        company=''\n    } = query;\n    const url = getAllCarsCompaniesrl();\n    return async dispatch => {\n        try {\n            response = await xFetch({\n                url: url,\n                method: REQUEST_TYPE.GET,\n                body: query\n            });\n            const { status, payload: { data } = {} } = response || {};\n            if (status === true) {\n                dispatch({\n                    type: FETCHING_ALL_CARS_COMPANIES_COMPLETED,\n                    payload: data\n                });\n            } else if (status === false) {\n                dispatch({\n                    type: FETCHING_ALL_CARS_COMPANIES_COMPLETED_WITH_ERROR\n                });\n            }\n        } catch (error) {\n            throw error;\n        }\n        return response;\n    };\n};\n\nfunction setCarsCompanies(state, data) {\n    const { companies } = data;\n    if (companies) {\n        return { ...companies };\n    }\n    return state;\n}\n\nexport default (state = {}, action = {}) => {\n    const { type, payload = {} } = action;\n    switch (type) {\n        default:\n            return setCarsCompanies(state, payload);\n    }\n};\n","import { REQUEST_TYPE } from \"../../constant\";\nimport { xFetch } from \"../../helpers/xhrHelpers\";\nimport { getAllCarsModelsrl } from \"../../helpers/url/cars\";\n\nexport const DISPATCH_ACTION_TYPE = \"DISPATCH_ACTION_TYPE\";\nexport const FETCHING_ALL_CARS_MODELS = \"FETCHING_ALL_CARS_MODELS\";\nexport const FETCHING_ALL_CARS_MODELS_COMPLETED =\n    \"FETCHING_ALL_CARS_MODELS_COMPLETED\";\nexport const FETCHING_ALL_CARS_MODELS_COMPLETED_WITH_ERROR =\n    \"FETCHING_ALL_CARS_MODELS_COMPLETED_WITH_ERROR\";\n\nexport const fetchAllCarsModels = (query) => {\n    let response = {};\n    const {\n        year_of_make=0,\n        company=''\n    } = query;\n    const url = getAllCarsModelsrl();\n    return async dispatch => {\n        try {\n            response = await xFetch({\n                url: url,\n                method: REQUEST_TYPE.GET,\n                body: query\n            });\n            const { status, payload: { data } = {} } = response || {};\n            if (status === true) {\n                dispatch({\n                    type: FETCHING_ALL_CARS_MODELS_COMPLETED,\n                    payload: data\n                });\n            } else if (status === false) {\n                dispatch({\n                    type: FETCHING_ALL_CARS_MODELS_COMPLETED_WITH_ERROR\n                });\n            }\n        } catch (error) {\n            throw error;\n        }\n        return response;\n    };\n};\n\nfunction setCarsModels(state, data) {\n    const { cars } = data;\n    if (cars) {\n        return { ...cars };\n    }\n    return state;\n}\n\nexport default (state = {}, action = {}) => {\n    const { type, payload = {} } = action;\n    switch (type) {\n        default:\n            return setCarsModels(state, payload);\n    }\n};\n","import { REQUEST_TYPE } from \"../../constant\";\nimport { xFetch } from \"../../helpers/xhrHelpers\";\nimport { getCarDetailsUrl } from \"../../helpers/url/cars\";\n\nexport const DISPATCH_ACTION_TYPE = \"DISPATCH_ACTION_TYPE\";\nexport const FETCHING_CAR_DETAILS = \"FETCHING_CAR_DETAILS\";\nexport const FETCHING_CAR_DETAILS_COMPLETED =\n    \"FETCHING_CAR_DETAILS_COMPLETED\";\nexport const FETCHING_CAR_DETAILS_COMPLETED_WITH_ERROR =\n    \"FETCHING_CAR_DETAILS_COMPLETED_WITH_ERROR\";\n\nexport const fetchCarDetails = (car_id) => {\n    let response = {};\n    const url = getCarDetailsUrl(car_id);\n    return async dispatch => {\n        try {\n            response = await xFetch({\n                url: url,\n                method: REQUEST_TYPE.GET\n            });\n            const { status, payload: { data } = {} } = response || {};\n            if (status === true) {\n                dispatch({\n                    type: FETCHING_CAR_DETAILS_COMPLETED,\n                    payload: data\n                });\n            } else if (status === false) {\n                dispatch({\n                    type: FETCHING_CAR_DETAILS_COMPLETED_WITH_ERROR\n                });\n            }\n        } catch (error) {\n            throw error;\n        }\n        return response;\n    };\n};\n\nfunction setCarDetails(state, data) {\n    const { car_details } = data;\n    if (car_details) {\n        return { ...car_details };\n    }\n    return state;\n}\n\nexport default (state = {}, action = {}) => {\n    const { type, payload = {} } = action;\n    switch (type) {\n        default:\n            return setCarDetails(state, payload);\n    }\n};\n","import { combineReducers } from \"redux\";\nimport years from \"./years\";\nimport companies from \"./companies\";\nimport cars from \"./models\";\nimport car_details from \"./cars\";\n\nconst rootReducer = combineReducers({\n    years,\n    companies,\n    cars,\n    car_details\n});\n\nexport default (state, action) => {\n    return rootReducer(state, action);\n};\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./modules\";\n// import LogRocket from \"logrocket\";\n\nconst enhancers = [];\n\nif (process.env.NODE_ENV === \"development\") {\n    const devToolsExtension = window.devToolsExtension;\n\n    if (typeof devToolsExtension === \"function\") {\n        enhancers.push(devToolsExtension());\n    }\n}\n\nlet middleWares = [thunk];\n\nconst composedEnhancers = compose(\n    applyMiddleware(...middleWares),\n    ...enhancers\n);\n\nexport default function configureStore() {\n    return createStore(rootReducer, composedEnhancers);\n}\n","import React from \"react\";\nimport { Spin, Icon } from \"antd\";\n\nexport default function IndefiniteLoader({ className, iconClassName }) {\n    return (\n        <div className=\"wp100\">\n            <Spin\n                className={`${className} `}\n                indicator={\n                    <Icon className={`${iconClassName} `} type=\"loading\" spin />\n                }\n            />\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Menu } from \"antd\";\nimport { PATH } from \"../../constant\";\nimport productIcon from \"../../assets/images/sidebar/pay.png\";\n\nconst LOGO = \"logo\";\nconst HOME = \"home\";\n\nclass Sidebar extends Component {\n    handleItemSelect = ({ selectedKeys }) => {\n        const { history } = this.props;\n        switch (selectedKeys[0]) {\n            default:\n                history.push(PATH.HOME);\n                break;\n        }\n    };\n\n    render() {\n        const { selectedKeys, auth } = this.props;\n        return (\n            <Menu\n                theme=\"dark\"\n                className=\"side-bar-menu\"\n                selectedKeys={selectedKeys}\n                onSelect={this.handleItemSelect}\n                defaultSelectedKeys={[HOME]}\n                style={{\n                    width: \"80px\",\n                    height: \"100%\",\n                    overflow: \"auto\"\n                }}\n            >\n                <Menu.Item\n                    className=\"flex direction-column justify-center align-center p0\"\n                    key={LOGO}\n                    title=\"Payment Services\"\n                >\n                    <img\n                        alt=\"\"\n                        style={{ width: \"32px\" }}\n                        src={productIcon}\n                    />\n                </Menu.Item>\n            </Menu>\n        );\n    }\n}\n\nexport default withRouter(Sidebar);\n","import { connect } from \"react-redux\";\nimport Sidebar from \"../../components/sidebar\";\nimport { withRouter } from \"react-router\";\nconst mapStateToProps = state => {\n    const { auth } = state;\n\n    return {\n        auth\n    };\n};\n\nexport default withRouter(\n    connect(mapStateToProps, null)(Sidebar)\n);\n","import React from 'react';\nimport { Input, List, Row, Col, Divider, Tag, Card, Progress } from 'antd';\n\nimport {\n    PATH\n} from \"../../constant\";\nimport { numberFormat } from \"../../helpers/numberFormatter\";\nconst { CheckableTag } = Tag;\nconst { Search } = Input;\n\nconst { Meta } = Card;\n\nclass CarFilters extends React.Component {\n    state = {\n        data: [],\n        loading: false,\n        selectedTags: [],\n        selectedCompanyTags: [],\n        selectedModelTags: [],\n        showCompany: false,\n        showModel: false,\n        searchOn: 'year_of_make',\n        search_input: ''\n    };\n\n    componentDidMount() {\n\n    }\n\n    handleChange(tag, checked) {\n        const selected = checked ? [tag] : [];\n        this.setState({ selectedTags: selected });\n        let showCompany = true;\n        let showModel = true;\n        if(selected.length==0){\n            showCompany=false;\n            showModel=false;\n            this.setState({selectedCompanyTags:[],searchOn:'year_of_make',search_input:''})\n        }else{\n            showCompany=true;\n            showModel=false;\n            const { fetchAllCarsCompanies } = this.props;\n            let query = {\n                year_of_make: tag\n            };\n            fetchAllCarsCompanies(query);\n            this.setState({selectedCompanyTags:[],searchOn:'companies',search_input:''})\n        }\n        this.setState({showCompany:showCompany,showModel:showModel});\n    }\n\n    handleChangeCompany(tag, checked) {\n        const selected = checked ? [tag] : [];\n        this.setState({ selectedCompanyTags: selected });\n        let showModel = true;\n        if(selected.length==0){\n            showModel=false;\n            this.setState({searchOn:'companies',search_input:''})\n        }else{\n            showModel=true;\n            const { fetchAllCarsModels } = this.props;\n            const { selectedTags } = this.state;\n            let query = {\n                year_of_make: selectedTags[0],\n                company: tag\n            };\n            fetchAllCarsModels(query);\n            this.setState({search_input:'',searchOn:'models'})\n        }\n        this.setState({showModel:showModel});\n    }\n\n    handleChangeModel(tag, checked) {\n        const selected = checked ? [tag] : [];\n        this.setState({ selectedModelTags: selected });\n    }\n\n    onSearch = (value) => {\n        const { searchOn, selectedTags, selectedCompanyTags } = this.state;\n        if(searchOn == 'year_of_make'){\n            const { fetchAllCarsYearOfMake } = this.props;\n            fetchAllCarsYearOfMake(value);\n        }else if(searchOn == 'companies'){\n            const { fetchAllCarsCompanies } = this.props;\n            fetchAllCarsCompanies({\n                year_of_make: selectedTags[0],\n                company:value\n            });\n        }else if(searchOn == 'models'){\n            const { fetchAllCarsModels } = this.props;\n            fetchAllCarsModels({\n                year_of_make: selectedTags[0],\n                company:selectedCompanyTags[0],\n                model:value\n            });\n        }\n    };\n    onChange = (event) => {\n        const { searchOn, selectedTags, selectedCompanyTags } = this.state;\n        let search = event.target.value;\n        this.setState({search_input:search});\n        if(searchOn == 'year_of_make'){\n            const { fetchAllCarsYearOfMake } = this.props;\n            fetchAllCarsYearOfMake(search);\n        }else if(searchOn == 'companies'){\n            const { fetchAllCarsCompanies } = this.props;\n            fetchAllCarsCompanies({\n                year_of_make: selectedTags[0],\n                company:search\n            });\n        }else if(searchOn == 'models'){\n            const { fetchAllCarsModels } = this.props;\n            fetchAllCarsModels({\n                year_of_make: selectedTags[0],\n                company:selectedCompanyTags[0],\n                model:search\n            });\n        }\n    };\n    showCar = (car_id) => {\n        const { history } = this.props;\n        const { location: { pathname = \"\" } = {} } = history;\n        history.push( PATH.CARS + '/' +car_id);\n    }\n\n    render() {\n        const {\n            years={},\n            companies={},\n            cars={}\n        } = this.props;\n        let year_data = [];\n        let company_data = [];\n        let model_data = [];\n        const { selectedTags, showCompany, showModel, selectedCompanyTags, selectedModelTags, search_input = '' } = this.state;\n        Object.keys(years).map(function(key) {\n            year_data.push(years[key]);\n        });\n        Object.keys(companies).map(function(key) {\n            company_data.push(companies[key]);\n        });\n        Object.keys(cars).map(function(key) {\n            model_data.push(cars[key]);\n        });\n       return (\n            <>\n                <Row>\n                    <Col span={5}>\n                    <Search\n                        placeholder=\"input search text\"\n                        allowClear\n                        onSearch={this.onSearch}\n                        onChange={this.onChange}\n                        style={{  margin: '0 10px' }}\n                        value={search_input}\n                    />\n                    <List\n                        size=\"Large\"\n                        header={<div style={{textAlign:\"center\",fontWeight:'bold'}}>YEAR OF MAKE</div>}\n                        bordered\n                        dataSource={year_data}\n                        renderItem={\n                            item => <List.Item>\n                                    <CheckableTag\n                                        key={item}\n                                        checked={selectedTags.indexOf(item) > -1}\n                                        onChange={checked => this.handleChange(item, checked)}\n                                    >\n                                        <span style={{cursor:'pointer'}}>{item}</span>\n                                    </CheckableTag>\n                            </List.Item>\n                            }\n                        style={{  width:'100%',margin: '10px 10px 0 10px',overflow: 'auto',height: '80vh'}}\n                    />\n                    </Col>\n                    <Col span={8}>\n                    <List\n                        size=\"Large\"\n                        header={<div style={{textAlign:\"center\",fontWeight:'bold'}}>COMPANY</div>}\n                        bordered\n                        dataSource={company_data}\n                        renderItem={\n                            item => <List.Item>\n                                    <CheckableTag\n                                        key={item}\n                                        checked={selectedCompanyTags.indexOf(item) > -1}\n                                        onChange={checked => this.handleChangeCompany(item, checked)}\n                                    >\n                                        <span style={{cursor:'pointer'}}>{item}</span>\n                                    </CheckableTag>\n                            </List.Item>\n                            }\n                        style={{margin: '42px',overflow: 'auto',height: '80vh'}}\n                        hidden={!showCompany}\n                    />\n                    </Col>\n                    <Col span={8}>\n                        <List\n                            size=\"Large\"\n                            header={<div style={{textAlign:\"center\",fontWeight:'bold'}}>MODEL</div>}\n                            bordered\n                            dataSource={model_data}\n                            renderItem={\n                                item => <List.Item>\n                                        <Card\n                                            onClick={()=>this.showCar(item.id)}\n                                            style={{ width: 300, margin: 'auto', cursor: 'pointer' }}\n                                            cover={\n                                            <img\n                                                alt=\"example\"\n                                                src=\"https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png\"\n                                            />\n                                            }\n                                            actions={[\n                                                <>\n                                                <div \n                                                    style={{ fontSize: \"18px\", margin:'auto', color:'black'}}\n                                                >\n                                                    Amount\n                                                </div>\n                                                <div \n                                                    style={{ fontSize: \"14px\", margin:'auto'}}\n                                                >\n                                                     {numberFormat(item.amount)}\n                                                </div>\n                                                </>,\n                                                item.is_available\n                                                    ?\n                                                    <Progress \n                                                        type=\"circle\" \n                                                        percent={100} \n                                                        width={40} \n                                                        title='Available'\n                                                    /> \n                                                    :\n                                                    <Progress \n                                                        type=\"circle\" \n                                                        percent={100} \n                                                        width={40} \n                                                        title='Not available'\n                                                        status='exception'\n                                                    /> \n                                            ]}\n                                        >\n                                            <Meta\n                                            title={item.company+` `+item.model}\n                                            description={`YOM - `+item.year_of_make}\n                                            />\n                                        </Card>\n                                </List.Item>\n                            }\n                            style={{margin: '30px',overflow: 'auto',height: '80vh'}}\n                            hidden={!showModel}\n                        />\n                    </Col>\n                </Row>\n                \n                \n                <Divider orientation=\"left\"></Divider>\n\n                </>\n        );\n    }\n    \n}\n\n\nexport default CarFilters;\n","export const numberFormat = value =>\n    new Intl.NumberFormat(\"en-IN\", {\n        style: \"currency\",\n        currency: \"INR\",\n        maximumFractionDigits: 2\n    }).format(value);\n","import React, { Component, Fragment } from \"react\";\nimport { Spin } from \"antd\";\nimport CarFilters from  \"../../car-filters\";\nimport Sidebar from \"../../../containers/sidebar\";\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    async getData() {\n        const { fetchAllCarsYearOfMake } = this.props;\n        try {\n            const res = await fetchAllCarsYearOfMake();\n        } catch (err) {\n            console.log(err);\n        }\n        this.setState({ loading: false });\n    }\n\n    renderLoading() {\n        return <Spin></Spin>;\n    }\n    \n\n    render() {\n\n        const {\n            years,\n            companies,\n            cars,\n            fetchAllCarsYearOfMake,\n            fetchAllCarsCompanies,\n            fetchAllCarsModels,\n            history\n        } = this.props;\n        const { loading } = this.state;\n        if (loading) {\n            return this.renderLoading();\n        }\n        \n        return (\n            <Fragment>\n                <Sidebar selectedKeys={\"home\"} />\n                <div className={\"pt10 pl75\"}>\n                    <h2 style={{textAlign:\"center\"}}>Car Bazaar</h2>\n                    <CarFilters \n                        years={years} \n                        companies={companies} \n                        cars={cars}\n                        fetchAllCarsYearOfMake={fetchAllCarsYearOfMake} \n                        fetchAllCarsCompanies={fetchAllCarsCompanies} \n                        fetchAllCarsModels={fetchAllCarsModels}\n                        history={history}\n                    />\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default Home;\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Home from \"../../../components/pages/home\";\nimport { fetchAllCarsYearOfMake } from \"../../../modules/years\";\nimport { fetchAllCarsCompanies } from \"../../../modules/companies\";\nimport { fetchAllCarsModels } from \"../../../modules/models\";\n\nconst mapStateToProps = state => {\n    const { years, companies, cars } = state;\n\n    return { years, companies, cars };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllCarsYearOfMake: (query) => {\n            dispatch(fetchAllCarsYearOfMake(query));\n        },\n        fetchAllCarsCompanies: (query) => {\n            dispatch(fetchAllCarsCompanies(query));\n        },\n        fetchAllCarsModels: (query) => {\n            dispatch(fetchAllCarsModels(query));\n        }\n    };\n};\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Home)\n);\n","export const getAllCarsYearOfMakeUrl = () => {\n    return \"/cars/years\";\n};\n\nexport const getAllCarsCompaniesrl = () => {\n    return \"/cars/companies\";\n};\n\nexport const getAllCarsModelsrl = () => {\n    return \"/cars/models\";\n};\n\nexport const getCarDetailsUrl = (car_id) => {\n    return `/cars/${car_id}`;\n};\n\n","import React, { Component, Fragment } from \"react\";\nimport { Spin, Row, Col } from \"antd\";\nimport Sidebar from \"../../../containers/sidebar\";\n\nclass Cars extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    async getData() {\n        const { fetchCarDetails,match } = this.props;\n        const { params:{car_id=''} } = match;\n        try {\n            const res = await fetchCarDetails(car_id);\n        } catch (err) {\n            console.log(err);\n        }\n        this.setState({ loading: false });\n    }\n\n    renderLoading() {\n        return <Spin></Spin>;\n    }\n    \n\n    render() {\n\n        const {\n            car_details,\n            match\n        } = this.props;\n        const { loading } = this.state;\n        if (loading) {\n            return this.renderLoading();\n        }\n        \n        return (\n            <Fragment>                \n                <Sidebar selectedKeys={\"\"} />\n                <div className={\"pt10 pl75\"}>\n                    <h2 style={{textAlign:\"center\"}}>Car Details</h2>\n                    <Row>\n                        <Col span={2}>-</Col>\n                        <Col span={10}>-</Col>\n                        <Col span={10}>-</Col>\n                        <Col span={2}>-</Col>\n\n                    </Row>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default Cars;\n","import { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Cars from \"../../../components/pages/cars\";\nimport { fetchCarDetails } from \"../../../modules/cars\";\n\nconst mapStateToProps = state => {\n    const { car_details } = state;\n\n    return { car_details };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchCarDetails: (car_id) => {\n            dispatch(fetchCarDetails(car_id));\n        }\n    };\n};\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Cars)\n);\n","import React, { Component, lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { PATH } from \"../constant\";\nimport Loading from \"../components/common/IndefiniteLoader\";\nimport HOME from  \"../containers/pages/home\";\nimport CARS from \"../containers/pages/cars\";\nclass Global extends Component {\n    render() {\n        const { history } = this.props;\n        return (\n            <Router history={history}>\n                <div className=\"App flex cmms\" style={{ overflow: \"hidden\" }}>\n                    <div className=\"flex-grow-1\">\n                        <Suspense\n                            fallback={<Loading />}\n                            className={\"wp100 mt20\"}\n                        >\n                            <Switch>\n                                <Route\n                                    exact\n                                    path={PATH.ROOT}\n                                    component={HOME}\n                                />\n                                <Route\n                                    exact\n                                    path={PATH.HOME}\n                                    component={HOME}\n                                />\n                                <Route\n                                    exact\n                                    path={\n                                        PATH.CARS +\n                                        `/:car_id`\n                                    }\n                                    component={CARS}\n                                />\n                            </Switch>\n                        </Suspense>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default Global;\n","import React, { Component, lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./stylesheets/App.less\";\nimport Loading from \"./components/common/IndefiniteLoader\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { createBrowserHistory } from \"history\";\nimport Sidebar from \"./containers/sidebar\";\nimport GlobalRoute from\"./routes/global\";\n\nconst history = createBrowserHistory();\nclass App extends Component {\n    componentDidMount() {\n        \n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Sidebar />\n                <Suspense fallback={<Loading className={\"wp100 mt20\"} />}>\n                    <GlobalRoute history={history} />\n                </Suspense>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","import App from \"../App\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n    const { auth: { isAuthenticated } = {} } = state;\n\n    return { isAuthenticated };\n};\n\nconst mapDispatchToProps = dispatch => {\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}